package com.pradipta.department.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;
import com.pradipta.department.client.EmployeeClient;
import com.pradipta.department.model.Department;
import com.pradipta.department.repository.DepartmentRepository;

@RestController
public class DepartmentController {

	private static final Logger LOGGER = LoggerFactory.getLogger(DepartmentController.class);
	
	@Autowired
	DepartmentRepository repository;
	@Autowired
	EmployeeClient employeeClient;
	
	@PostMapping("/")
	public Department add(@RequestBody Department department) {
		LOGGER.info("Department add: {}", department);
		//return repository.add(department);
		repository.insert(department);
		return department;
	}
	
	@GetMapping("/{id}")
	public Optional<Department> findById(@PathVariable("id") Long id) {
		LOGGER.info("Department find: id={}", id);
		return repository.findById(id);
	}
	
	@GetMapping("/")
	public List<Department> findAll() {
		LOGGER.info("Department find");
		return repository.findAll();
	}
	
	@GetMapping("/organization/{organizationId}")
	@HystrixCommand(fallbackMethod = "findByOrganizationFallback")
	public List<Department> findByOrganization(@PathVariable("organizationId") Long organizationId) {
		LOGGER.info("Department find: organizationId={}", organizationId);
		return repository.findByOrganizationId(organizationId);
	}
	
	public List<Department> findByOrganizationFallback(Long organizationId) {
		LOGGER.info("Department fallback: organizationId={}", organizationId);
		return new ArrayList<>();
	}
	
	
	@GetMapping("/organization/{organizationId}/with-employees")
	@HystrixCommand(fallbackMethod = "findByOrganizationFallback")
	public List<Department> findByOrganizationWithEmployees(@PathVariable("organizationId") Long organizationId) {
		LOGGER.info("Department find: organizationId={}", organizationId);
		List<Department> departments = repository.findByOrganizationId(organizationId);
		System.out.println(departments);
		System.out.println(employeeClient.findByDepartment(1L));
		for(Department d:departments)
		{
			
		}
		departments.forEach(d -> d.setEmployees(employeeClient.findByDepartment(d.getId())));
		return departments;
	}
	
	public List<Department> findByOrganizationWithEmployeesFallback(Long organizationId) {
		LOGGER.info("Department find fallback: organizationId={}", organizationId);
		return new ArrayList<>();
	}
	
}
